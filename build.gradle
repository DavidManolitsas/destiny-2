plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.openapi.generator" version '7.7.0'
    id 'com.diffplug.spotless' version '7.0.4'
}

group = 'com.manolitsas.david'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

tasks.named('build') {
    dependsOn tasks.named('spotlessApply')
}

compileJava.dependsOn tasks.openApiGenerate

dependencies {
    // springframework
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // springdoc openapi
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    // junit
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}

openApiGenerate {
    generatorName = "spring"
    inputSpec.set(file("${projectDir}/openapi.yaml").toURI().toString())
    outputDir = "${projectDir}/build/generated"
    apiPackage = "com.manolitsas.david.api"
    modelPackage = "com.manolitsas.david.dto"
    apiNameSuffix.set("Api")
    groupId.set("com.manolitsas.david")
    configOptions = [
            library: 'spring-boot',
            dateLibrary: 'java8',
            interfaceOnly: 'true',
            skipDefaultInterface: 'true',
            useTags: 'true',
            useSpringBoot3: 'true',
    ]
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/src/main/java"
        }
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        targetExclude("**/generated/**")
    }
}
